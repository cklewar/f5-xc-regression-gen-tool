#############################################
# DO NOT EDIT THIS FILE IT IS AUTOGENERATED #
#############################################

stages:
  - eut-apply
  - feature-apply
  - rte-collect
  - rte-apply
  - rte-artifacts
  - regression-test-client-server-east-west-traffic-aws-fortio
  - regression-test-verify-client-server-east-west-traffic-aws-fortio
  - regression-test-client-server-east-west-traffic-aws-iperf
  - regression-test-verify-client-server-east-west-traffic-aws-iperf
  - regression-test-client-server1-east-west-traffic-aws-fortio
  - regression-test-verify-client-server1-east-west-traffic-aws-fortio
  - regression-test-client-server1-east-west-traffic-aws-iperf
  - rte-destroy
  - feature-destroy
  - eut-destroy
  
variables:
  S3_ROOT: "features/$FEATURE/$ENVIRONMENT/project-a"
  S3_EUT_ROOT: "$S3_ROOT/regression/eut"
  S3_EUT_BASE: "$S3_ROOT/$S3_EUT_ROOT/mcn"
  S3_RTE_ROOT: "$S3_ROOT/regression/eut/base/regression/rte"
  S3_TESTS_ROOT: "$S3_ROOT/regression/eut/base/regression/tests"
  S3_VERIFICATIONS_ROOT: "$S3_ROOT/regression/eut/base/regression/verification"
  KEYS_DIR: "${CI_PROJECT_DIR}/keys"
  ARTIFACTS_ROOT_DIR: "${CI_PROJECT_DIR}/artifacts"
  EUT_ROOT_DIR: "${CI_PROJECT_DIR}/regression/eut/base"
  FEATURES_ROOT_DIR: "${CI_PROJECT_DIR}/regression/eut/features"
  EUT_ROOT_TF_VAR_FILE: "${EUT_ROOT_DIR}/terraform.tfvars.json"
  RTE_ROOT_DIR: "${CI_PROJECT_DIR}/regression/rte"
  SSH_PUBLIC_KEY_FILE: "key.pub"
  SSH_PUBLIC_KEY_FILE_PATH: "s3://acmecorp-model/production/volterra"
  SSH_PRIVATE_KEY_FILE: "key"
  SSH_PRIVATE_KEY_FILE_PATH: "s3://acmecorp-model/production/volterra"
  P12_FILE: "acmecorp.console.ves.volterra.io.api-creds.p12"
  P12_FILE_PATH: "s3://acmecorp-model/production/volterra"
  GIT_SUBMODULE_STRATEGY: "recursive"
  FEATURE_FIREWALL_ROOT_TF_VAR_FILE: "$FEATURE_ROOT_DIR/firewall/terraform.tfvars"
  FEATURE_LOADBALANCER_ROOT_TF_VAR_FILE: "$FEATURE_ROOT_DIR/loadbalancer/terraform.tfvars"
  
.deploy_rules:
  rules:
    - if: $ACTION == "deploy" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "deploy" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.destroy_rules:
  rules:
    - if: $ACTION == "destroy" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "destroy" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.deploy_eut_rules:
  rules:
    - if: $ACTION == "deploy-eut" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "deploy-eut" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.destroy_eut_rules:
  rules:
    - if: $ACTION == "destroy-eut" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "destroy-eut" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.deploy_feature_rules:
  rules:
    - if: $ACTION == "deploy-feature" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "deploy-feature" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.destroy_feature_rules:
  rules:
    - if: $ACTION == "destroy-feature" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "destroy-feature" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.deploy_rte_rules:
  rules:
    - if: $ACTION == "deploy-rte" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "deploy-rte" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.destroy_rte_rules:
  rules:
    - if: $ACTION == "destroy-rte" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "destroy-rte" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.regression_test_rules:
  rules:
    - if: $ACTION == "test" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "test" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

regression_test_verify_rules:
  rules:
    - if: $ACTION == "verify" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "verify" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.base: &base
  tags:
    - blue
  cache:
    policy: pull
    key: "${CI_COMMIT_SHA}"
  image: volterra.azurecr.io/ves.io/acmecorp-features:1.5.1
  variables:
    TF_VAR_feature: $FEATURE
    TF_VAR_environment: $ENVIRONMENT
    TF_VAR_gcp_project_id: $GCP_PROJECT_ID
    TF_VAR_ssh_private_key_file: $KEYS_DIR/$SSH_PRIVATE_KEY_FILE
    TF_VAR_ssh_public_key_file: $KEYS_DIR/$SSH_PUBLIC_KEY_FILE
  before_script:
    - |
      #!/usr/bin/env bash
      aws s3 cp $SSH_PUBLIC_KEY_FILE_PATH/$SSH_PUBLIC_KEY_FILE $KEYS_DIR
      aws s3 cp $SSH_PRIVATE_KEY_FILE_PATH/$SSH_PRIVATE_KEY_FILE $KEYS_DIR
      aws s3 cp $P12_FILE_PATH/$P12_FILE $KEYS_DIR
      export TF_VAR_f5xc_api_p12_file="${KEYS_DIR}/${P12_FILE}"
      if [ "$ENVIRONMENT" == "production" ]; then
        export TF_VAR_f5xc_api_token=$PRODUCTION_API_TOKEN  
      elif [ "$ENVIRONMENT" == "staging" ]; then
        export TF_VAR_f5xc_api_token=$STAGING_API_TOKEN
      fi
    - terraform version
    - echo $CI_PROJECT_DIR
    - cd $CI_PROJECT_DIR

# eut - apply
eut-apply:
  <<: *base
  stage: eut-apply
  rules:
    - !reference [ .deploy_rules, rules ]
    - !reference [ .deploy_eut_rules, rules ]
  script:
      - |
        #!/usr/bin/env bash
        cd $EUT_ROOT_DIR/mcn/aws
        terraform init --backend-config="key=$S3_EUT_ROOT/project-a/mcn/aws"
        terraform apply -var-file=$EUT_ROOT_TF_VAR_FILE -var-file=$S3_EUT_ROOT/project-a/mcn/aws/terraform.tfvars.json -var-file=$RTE_SHARED_ARTIFACTS_FILE -auto-approve
        terraform output > $EUT_ROOT_DIR/mcn/aws/site.tfvars
        cd $EUT_ROOT_DIR/mcn/azure
        terraform init --backend-config="key=$S3_EUT_ROOT/project-a/mcn/azure"
        # terraform import -var-file=$EUT_ROOT_TF_VAR_FILE -var-file=$S3_EUT_ROOT/project-a/mcn/azure/terraform.tfvars.json -var-file=$RTE_SHARED_ARTIFACTS_FILE azurerm_marketplace_agreement.xc /subscriptions/$ARM_SUBSCRIPTION_ID/providers/Microsoft.MarketplaceOrdering/agreements/volterraedgeservices/offers/entcloud_voltmesh_voltstack_node/plans/freeplan_entcloud_voltmesh_voltstack_node
        terraform apply -var-file=$EUT_ROOT_TF_VAR_FILE -var-file=$S3_EUT_ROOT/project-a/mcn/azure/terraform.tfvars.json -var-file=$RTE_SHARED_ARTIFACTS_FILE -auto-approve
        terraform output > $EUT_ROOT_DIR/mcn/azure/site.tfvars
        
  timeout: 1h 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# feature - mcn - firewall - apply
feature-mcn-firewall-apply:
  <<: *base
  stage: feature-apply
  rules:
    - !reference [ .deploy_rules, rules ]
    - !reference [ .deploy_features_rules, rules ]
  script:
      - |
        #!/usr/bin/env bash
        cd $FEATURES_ROOT_DIR/firewall
        terraform init --backend-config="key=$S3_EUT_ROOT/mcn/features/firewall"  
        terraform apply -var-file=$EUT_ROOT_TF_VAR_FILE -auto-approve
        terraform output > $FEATURES_ROOT_DIR/firewall/feature.tfvars
  timeout: 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# feature - mcn - loadbalancer - apply
feature-mcn-loadbalancer-apply:
  <<: *base
  stage: feature-apply
  rules:
    - !reference [ .deploy_rules, rules ]
    - !reference [ .deploy_features_rules, rules ]
  script:
      - |
        #!/usr/bin/env bash
        cd $FEATURES_ROOT_DIR/loadbalancer
        terraform init --backend-config="key=$S3_EUT_ROOT/mcn/features/loadbalancer"  
        terraform apply -var-file=$EUT_ROOT_TF_VAR_FILE -auto-approve
        terraform output > $FEATURES_ROOT_DIR/loadbalancer/feature.tfvars
  timeout: 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte - aws - client-server - apply
rte-aws-client-server-apply:
  <<: *base
  stage: rte-apply
  rules:
    - !reference [ .deploy_rules, rules ]
    - !reference [ .deploy_rte_rules, rules ]
  script:
      - |
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte - aws - client-server1 - apply
rte-aws-client-server1-apply:
  <<: *base
  stage: rte-apply
  rules:
    - !reference [ .deploy_rules, rules ]
    - !reference [ .deploy_rte_rules, rules ]
  script:
      - |
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte - azure - client-server - apply
rte-azure-client-server-apply:
  <<: *base
  stage: rte-apply
  rules:
    - !reference [ .deploy_rules, rules ]
    - !reference [ .deploy_rte_rules, rules ]
  script:
      - |
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte - azure - client-server1 - apply
rte-azure-client-server1-apply:
  <<: *base
  stage: rte-apply
  rules:
    - !reference [ .deploy_rules, rules ]
    - !reference [ .deploy_rte_rules, rules ]
  script:
      - |
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# test - fortio - client-server - aws - apply
regression-test-aws-client-server-east-west-traffic-aws-fortio:
  <<: *base
  rules:
    - !reference [ .regression_test_rules, rules ]
    - !reference [ .regression_test_east_west_traffic_aws_fortio, rules ]
  stage: regression-test
  script:
      - |
        #!/usr/bin/env bash
        cd $CI_PROJECT_DIR/regression/tests/fortio
        terraform init --backend-config="key=$S3_TESTS_ROOT/fortio/aws"
        terraform apply -compact-warnings -var-file=$ARTIFACTS_ROOT_DIR/fortio/aws/artifacts.tfvars -auto-approve
  timeout: 15m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# test - iperf - client-server - aws - apply
regression-test-aws-client-server-east-west-traffic-aws-iperf:
  <<: *base
  rules:
    - !reference [ .regression_test_rules, rules ]
    - !reference [ .regression_test_east_west_traffic_aws_iperf, rules ]
  stage: regression-test
  script:
      - |
        #!/usr/bin/env bash
        cd $CI_PROJECT_DIR/regression/tests/iperf
        terraform init --backend-config="key=$S3_TESTS_ROOT/iperf/aws"
        terraform apply -compact-warnings -var-file=$ARTIFACTS_ROOT_DIR/iperf/aws/artifacts.tfvars -auto-approve
  timeout: 15m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# test - fortio - client-server1 - aws - apply
regression-test-aws-client-server1-east-west-traffic-aws-fortio:
  <<: *base
  rules:
    - !reference [ .regression_test_rules, rules ]
    - !reference [ .regression_test_east_west_traffic_aws_fortio, rules ]
  stage: regression-test
  script:
      - |
        #!/usr/bin/env bash
        cd $CI_PROJECT_DIR/regression/tests/fortio
        terraform init --backend-config="key=$S3_TESTS_ROOT/fortio/aws"
        terraform apply -compact-warnings -var-file=$ARTIFACTS_ROOT_DIR/fortio/aws/artifacts.tfvars -auto-approve
  timeout: 15m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# test - iperf - client-server1 - aws - apply
regression-test-aws-client-server1-east-west-traffic-aws-iperf:
  <<: *base
  rules:
    - !reference [ .regression_test_rules, rules ]
    - !reference [ .regression_test_east_west_traffic_aws_iperf, rules ]
  stage: regression-test
  script:
      - |
        #!/usr/bin/env bash
        cd $CI_PROJECT_DIR/regression/tests/iperf
        terraform init --backend-config="key=$S3_TESTS_ROOT/iperf/aws"
        terraform apply -compact-warnings -var-file=$ARTIFACTS_ROOT_DIR/iperf/aws/artifacts.tfvars -auto-approve
  timeout: 15m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# test - fortio - client-server - azure - apply
regression-test-azure-client-server-east-west-traffic-aws-fortio:
  <<: *base
  rules:
    - !reference [ .regression_test_rules, rules ]
    - !reference [ .regression_test_east_west_traffic_aws_fortio, rules ]
  stage: regression-test
  script:
      - |
        #!/usr/bin/env bash
        cd $CI_PROJECT_DIR/regression/tests/fortio
        terraform init --backend-config="key=$S3_TESTS_ROOT/fortio/azure"
        terraform apply -compact-warnings -var-file=$ARTIFACTS_ROOT_DIR/fortio/azure/artifacts.tfvars -auto-approve
  timeout: 15m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# test - iperf - client-server - azure - apply
regression-test-azure-client-server-east-west-traffic-aws-iperf:
  <<: *base
  rules:
    - !reference [ .regression_test_rules, rules ]
    - !reference [ .regression_test_east_west_traffic_aws_iperf, rules ]
  stage: regression-test
  script:
      - |
        #!/usr/bin/env bash
        cd $CI_PROJECT_DIR/regression/tests/iperf
        terraform init --backend-config="key=$S3_TESTS_ROOT/iperf/azure"
        terraform apply -compact-warnings -var-file=$ARTIFACTS_ROOT_DIR/iperf/azure/artifacts.tfvars -auto-approve
  timeout: 15m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# test - fortio - client-server1 - azure - apply
regression-test-azure-client-server1-east-west-traffic-aws-fortio:
  <<: *base
  rules:
    - !reference [ .regression_test_rules, rules ]
    - !reference [ .regression_test_east_west_traffic_aws_fortio, rules ]
  stage: regression-test
  script:
      - |
        #!/usr/bin/env bash
        cd $CI_PROJECT_DIR/regression/tests/fortio
        terraform init --backend-config="key=$S3_TESTS_ROOT/fortio/azure"
        terraform apply -compact-warnings -var-file=$ARTIFACTS_ROOT_DIR/fortio/azure/artifacts.tfvars -auto-approve
  timeout: 15m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# test - iperf - client-server1 - azure - apply
regression-test-azure-client-server1-east-west-traffic-aws-iperf:
  <<: *base
  rules:
    - !reference [ .regression_test_rules, rules ]
    - !reference [ .regression_test_east_west_traffic_aws_iperf, rules ]
  stage: regression-test
  script:
      - |
        #!/usr/bin/env bash
        cd $CI_PROJECT_DIR/regression/tests/iperf
        terraform init --backend-config="key=$S3_TESTS_ROOT/iperf/azure"
        terraform apply -compact-warnings -var-file=$ARTIFACTS_ROOT_DIR/iperf/azure/artifacts.tfvars -auto-approve
  timeout: 15m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure










project-a
mcn

[object]

[object]



fortio

iperf



fortio

iperf






bandwidth



bandwidth





bandwidth



bandwidth


