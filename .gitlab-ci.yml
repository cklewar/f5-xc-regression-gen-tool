#############################################
# DO NOT EDIT THIS FILE IT IS AUTOGENERATED #
#############################################

stages:
  - eut-apply
  - eut-artifacts
  - rte-collect
  - rte-apply
  - rte-artifacts
  - feature-apply
  - regression-test
  - regression-test-verify
  - test-client-server-aws-east-west-traffic-a-apply
  - test-client-server-aws-east-west-traffic-b-apply
  - test-client-server1-aws-east-west-traffic-a-apply
  - test-client-server1-aws-east-west-traffic-b-apply
  - verification-client-server-aws-east-west-traffic-verify-a-apply
  - verification-client-server-aws-east-west-traffic-verify-b-apply
  - verification-client-server1-aws-east-west-traffic-verify-a-apply
  - verification-client-server1-aws-east-west-traffic-verify-b-apply
  - feature-destroy
  - rte-destroy
  - eut-destroy
  
variables:
  S3_ROOT: "features/$FEATURE/$ENVIRONMENT/project-a"
  S3_EUT_ROOT: "$S3_ROOT/regression/eut"
  S3_EUT_BASE: "$S3_EUT_ROOT/base/mcn"
  S3_RTE_ROOT: "$S3_ROOT/regression/rte"
  S3_TESTS_ROOT: "$S3_ROOT/regression/tests"
  S3_VERIFICATIONS_ROOT: "$S3_ROOT/regression/verification"
  KEYS_DIR: "${CI_PROJECT_DIR}/keys"
  ARTIFACTS_ROOT_DIR: "${CI_PROJECT_DIR}/artifacts"
  EUT_ROOT_DIR: "${CI_PROJECT_DIR}/regression/eut/base"
  FEATURES_ROOT_DIR: "${CI_PROJECT_DIR}/regression/eut/features"
  EUT_ROOT_TF_VAR_FILE: "${EUT_ROOT_DIR}/mcn/terraform.tfvars.json"
  RTE_ROOT_DIR: "${CI_PROJECT_DIR}/regression/rte"
  SSH_PUBLIC_KEY_FILE: "key.pub"
  SSH_PUBLIC_KEY_FILE_PATH: "s3://acmecorp-model/production/volterra"
  SSH_PRIVATE_KEY_FILE: "key"
  SSH_PRIVATE_KEY_FILE_PATH: "s3://acmecorp-model/production/volterra"
  P12_FILE: "acmecorp.console.ves.volterra.io.api-creds.p12"
  P12_FILE_PATH: "s3://acmecorp-model/production/volterra"
  GIT_SUBMODULE_STRATEGY: "recursive"
  FEATURE_FIREWALL_ROOT_TF_VAR_FILE: "$FEATURE_ROOT_DIR/firewall/terraform.tfvars"
  FEATURE_LOADBALANCER_ROOT_TF_VAR_FILE: "$FEATURE_ROOT_DIR/loadbalancer/terraform.tfvars"
  
.deploy_rules:
  rules:
    - if: $ACTION == "deploy" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "deploy" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.destroy_rules:
  rules:
    - if: $ACTION == "destroy" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "destroy" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.deploy_eut_rules:
  rules:
    - if: $ACTION == "deploy-eut" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "deploy-eut" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.destroy_eut_rules:
  rules:
    - if: $ACTION == "destroy-eut" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "destroy-eut" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.deploy_feature_rules:
  rules:
    - if: $ACTION == "deploy-feature" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "deploy-feature" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.destroy_feature_rules:
  rules:
    - if: $ACTION == "destroy-feature" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "destroy-feature" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.deploy_rte_rules:
  rules:
    - if: $ACTION == "deploy-rte" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "deploy-rte" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.destroy_rte_rules:
  rules:
    - if: $ACTION == "destroy-rte" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "destroy-rte" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.regression_test_rules:
  rules:
    - if: $ACTION == "test" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "test" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.regression_verification_rules:
  rules:
    - if: $ACTION == "verify" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "verify" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.regression_test_client_server_east_west_traffic_a:
  rules:
    - if: $ACTION == "test-client-server-east-west-traffic-a" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "test-client-server-east-west-traffic-a" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.regression_test_client_server_east_west_traffic_b:
  rules:
    - if: $ACTION == "test-client-server-east-west-traffic-b" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "test-client-server-east-west-traffic-b" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.regression_test_client_server1_east_west_traffic_a:
  rules:
    - if: $ACTION == "test-client-server1-east-west-traffic-a" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "test-client-server1-east-west-traffic-a" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.regression_test_client_server1_east_west_traffic_b:
  rules:
    - if: $ACTION == "test-client-server1-east-west-traffic-b" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "test-client-server1-east-west-traffic-b" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.regression_verification_client_server_east_west_traffic_a_east_west_traffic_verify_a:
  rules:
    - if: $ACTION == "verification-client-server-east-west-traffic-a-east-west-traffic-verify-a" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "verification-client-server-east-west-traffic-a-east-west-traffic-verify-a" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.regression_verification_client_server_east_west_traffic_b_east_west_traffic_verify_b:
  rules:
    - if: $ACTION == "verification-client-server-east-west-traffic-b-east-west-traffic-verify-b" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "verification-client-server-east-west-traffic-b-east-west-traffic-verify-b" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.regression_verification_client_server1_east_west_traffic_a_east_west_traffic_verify_a:
  rules:
    - if: $ACTION == "verification-client-server1-east-west-traffic-a-east-west-traffic-verify-a" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "verification-client-server1-east-west-traffic-a-east-west-traffic-verify-a" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.regression_verification_client_server1_east_west_traffic_b_east_west_traffic_verify_b:
  rules:
    - if: $ACTION == "verification-client-server1-east-west-traffic-b-east-west-traffic-verify-b" && $CI_PIPELINE_SOURCE == "trigger" && $CI_PIPELINE_TRIGGERED == "true"
    - if: $ACTION == "verification-client-server1-east-west-traffic-b-east-west-traffic-verify-b" && $CI_PIPELINE_SOURCE == "web" && $CI_PIPELINE_TRIGGERED == "true"

.base: &base
  tags:
    - blue
  cache:
    policy: pull
    key: "${CI_COMMIT_SHA}"
  image: volterra.azurecr.io/ves.io/acmecorp-features:1.5.1
  variables:
    TF_VAR_feature: $FEATURE
    TF_VAR_environment: $ENVIRONMENT
    TF_VAR_gcp_project_id: $GCP_PROJECT_ID
    TF_VAR_ssh_private_key_file: $KEYS_DIR/$SSH_PRIVATE_KEY_FILE
    TF_VAR_ssh_public_key_file: $KEYS_DIR/$SSH_PUBLIC_KEY_FILE
  before_script:
    - |
      #!/usr/bin/env bash
      aws s3 cp $SSH_PUBLIC_KEY_FILE_PATH/$SSH_PUBLIC_KEY_FILE $KEYS_DIR
      aws s3 cp $SSH_PRIVATE_KEY_FILE_PATH/$SSH_PRIVATE_KEY_FILE $KEYS_DIR
      aws s3 cp $P12_FILE_PATH/$P12_FILE $KEYS_DIR
      export TF_VAR_f5xc_api_p12_file="${KEYS_DIR}/${P12_FILE}"
      if [ "$ENVIRONMENT" == "production" ]; then
        export TF_VAR_f5xc_api_token=$PRODUCTION_API_TOKEN  
      elif [ "$ENVIRONMENT" == "staging" ]; then
        export TF_VAR_f5xc_api_token=$STAGING_API_TOKEN
      fi
    - terraform version
    - echo $CI_PROJECT_DIR
    - cd $CI_PROJECT_DIR

# eut - apply
eut-apply:
  <<: *base
  stage: eut-apply
  rules:
    - !reference [ .deploy_rules, rules ]
    - !reference [ .deploy_eut_rules, rules ]
  script:
      - |
        #!/usr/bin/env bash
        mkdir -p $ARTIFACTS_ROOT_DIR/eut/mcn/aws
        cd $EUT_ROOT_DIR/mcn/aws
        terraform init --backend-config="key=$S3_EUT_BASE/aws/1.0"
        terraform apply -var-file=$EUT_ROOT_TF_VAR_FILE -auto-approve
        terraform output > $ARTIFACTS_ROOT_DIR/eut/mcn/aws/site.tfvars
        mkdir -p $ARTIFACTS_ROOT_DIR/eut/mcn/azure
        cd $EUT_ROOT_DIR/mcn/azure
        terraform init --backend-config="key=$S3_EUT_BASE/azure/1.0"
        #terraform import -var-file=$EUT_ROOT_TF_VAR_FILE -var-file=$S3_EUT_ROOT/mcn/azure/terraform.tfvars.json -var-file=$RTE_SHARED_ARTIFACTS_FILE azurerm_marketplace_agreement.xc /subscriptions/$ARM_SUBSCRIPTION_ID/providers/Microsoft.MarketplaceOrdering/agreements/volterraedgeservices/offers/entcloud_voltmesh_voltstack_node/plans/freeplan_entcloud_voltmesh_voltstack_node
        
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 1h 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# eut - artifacts
eut-artifacts:
  <<: *base
  stage: eut-artifacts
  rules:
    - !reference [ .destroy_rules, rules ]
    - !reference [ .destroy_rte_rules, rules ]
  script:
      - |
        #!/usr/bin/env bash
        mkdir -p $ARTIFACTS_ROOT_DIR/eut/mcn/aws
        cd $EUT_ROOT_DIR/mcn/aws
        terraform init --backend-config="key=$S3_EUT_BASE/aws/1.0"
        terraform output > $ARTIFACTS_ROOT_DIR/eut/mcn/aws/site.tfvars
        mkdir -p $ARTIFACTS_ROOT_DIR/eut/mcn/azure
        cd $EUT_ROOT_DIR/mcn/azure
        terraform init --backend-config="key=$S3_EUT_BASE/azure/1.0"
        
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 1h 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte-client-server-aws-client - apply
rte-client-server-aws-client-apply:
  <<: *base
  stage: rte-apply
  rules:
    - !reference [ .deploy_rules, rules ]
    - !reference [ .deploy_rte_rules, rules ]
  script:
      - |
        #!/usr/bin/env bash
        mkdir -p $ARTIFACTS_ROOT_DIR/rte/client_server/aws/client
        cd $RTE_ROOT_DIR/client_server/aws/client
        terraform init --backend-config="key=$S3_RTE_ROOT/client_server/aws/client"
        terraform apply -compact-warnings -var-file=$RTE_ROOT_DIR/client_server/terraform.tfvars.json -var-file=$ARTIFACTS_ROOT_DIR/eut/mcn/aws/site.tfvars -auto-approve
        terraform output > $ARTIFACTS_ROOT_DIR/rte/client_server/aws/client/client.tfvars
        #terraform output aws_workload_vpc_ids > $RTE_CLIENT_SERVER_AWS_VPC_IDS_ARTIFACTS_FILE
        #terraform output -json aws_workload_vpc_ids > $RTE_CLIENT_SERVER_AWS_VPC_IDS_ARTIFACTS_FILE
        #terraform output -json | jq 'with_entries(select(.key | in({"destination_ip":1, "ssh_host":1, "ssh_user":1})))' > $RTE_CLIENT_SERVER_AWS_CONNECTION_ARTIFACTS_FILE
        #echo "aws_destination_ip=$(terraform output destination_ip)" >> $RTE_client_server_aws_DESTINATION_IPS_ARTIFACTS_FILE
        
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte-client-server-aws-client - artifacts
rte-client-server-aws-client-artifacts:
  <<: *base
  rules:
    - !reference [ .regression_test_rules, rules ]
    - !reference [ .destroy_rules, rules ]
    - !reference [ .regression_test_client_server_east_west_traffic_a, rules ]
    - !reference [ .regression_test_client_server_east_west_traffic_b, rules ]
  stage: rte-artifacts
  script:
      - |
        #!/usr/bin/env bash
        mkdir -p $ARTIFACTS_ROOT_DIR/rte/client_server/aws/client
        cd $RTE_ROOT_DIR/client_server/aws/client
        terraform init --backend-config="key=$S3_RTE_ROOT/client_server/aws/client"
        terraform output > $ARTIFACTS_ROOT_DIR/rte/client_server/aws/client/client.tfvars
        
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 5m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte-client-server-aws-server - apply
rte-client-server-aws-server-apply:
  <<: *base
  stage: rte-apply
  rules:
    - !reference [ .deploy_rules, rules ]
    - !reference [ .deploy_rte_rules, rules ]
  script:
      - |
        #!/usr/bin/env bash
        mkdir -p $ARTIFACTS_ROOT_DIR/rte/client_server/aws/server
        cd $RTE_ROOT_DIR/client_server/aws/server
        terraform init --backend-config="key=$S3_RTE_ROOT/client_server/aws/server"
        terraform apply -var-file=$RTE_ROOT_DIR/client_server/terraform.tfvars.json -var-file=$ARTIFACTS_ROOT_DIR/eut/mcn/aws/site.tfvars -auto-approve
        terraform output > $ARTIFACTS_ROOT_DIR/rte/client_server/aws/server/server.tfvars
        
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte-client-server-aws-server - artifacts
rte-client-server-aws-server-artifacts:
  <<: *base
  rules:
    - !reference [ .regression_test_rules, rules ]
    - !reference [ .destroy_rules, rules ]
    - !reference [ .regression_test_client_server_east_west_traffic_a, rules ]
    - !reference [ .regression_test_client_server_east_west_traffic_b, rules ]
  stage: rte-artifacts
  script:
      - |
        #!/usr/bin/env bash
        mkdir -p $ARTIFACTS_ROOT_DIR/rte/client_server/aws/server
        cd $RTE_ROOT_DIR/client_server/aws/server
        terraform init --backend-config="key=$S3_RTE_ROOT/client_server/aws/server"
        terraform output > $ARTIFACTS_ROOT_DIR/rte/client_server/aws/server/server.tfvars
        
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 5m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte-client-server-azure-server - apply
rte-client-server-azure-server-apply:
  <<: *base
  stage: rte-apply
  rules:
    - !reference [ .deploy_rules, rules ]
    - !reference [ .deploy_rte_rules, rules ]
  script:
      - |
        #!/usr/bin/env bash
        mkdir -p $ARTIFACTS_ROOT_DIR/rte/client_server/azure/server
        cd $RTE_ROOT_DIR/client_server/azure/server
        terraform init --backend-config="key=$S3_RTE_ROOT/client_server/azure/server"
        #terraform apply -var-file=$RTE_ROOT_DIR/client_server/terraform.tfvars.json -var-file=$ARTIFACTS_ROOT_DIR/eut/mcn/azure/site.tfvars -auto-approve
        #terraform output > $ARTIFACTS_ROOT_DIR/rte/client_server/azure/server/server.tfvars
        #terraform output -json | jq 'with_entries(select(.key | in({"destination_ip":1, "ssh_host":1, "ssh_user":1})))' > $RTE_CLIENT_SERVER_AZURE_CONNECTION_ARTIFACTS_FILE
        #echo "azure_destination_ip=$(terraform output destination_ip)" >> $RTE_CLIENT_SERVER_AZURE_DESTINATION_IPS_ARTIFACTS_FILE
        
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte-client-server-azure-server - artifacts
rte-client-server-azure-server-artifacts:
  <<: *base
  rules:
    - !reference [ .regression_test_rules, rules ]
    - !reference [ .destroy_rules, rules ]
    - !reference [ .regression_test_client_server_east_west_traffic_a, rules ]
    - !reference [ .regression_test_client_server_east_west_traffic_b, rules ]
  stage: rte-artifacts
  script:
      - |
        #!/usr/bin/env bash
        mkdir -p $ARTIFACTS_ROOT_DIR/rte/client_server/azure/server
        cd $RTE_ROOT_DIR/client_server/azure/server
        terraform init --backend-config="key=$S3_RTE_ROOT/client_server/azure/server"
        terraform output > $ARTIFACTS_ROOT_DIR/rte/client_server/azure/server/server.tfvars
        
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 5m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte-client-server1-aws-client - apply
rte-client-server1-aws-client-apply:
  <<: *base
  stage: rte-apply
  rules:
    - !reference [ .deploy_rules, rules ]
    - !reference [ .deploy_rte_rules, rules ]
  script:
      - |
        #!/usr/bin/env bash
        mkdir -p $ARTIFACTS_ROOT_DIR/rte/client_server1/aws/client
        cd $RTE_ROOT_DIR/client_server1/aws/client
        terraform init --backend-config="key=$S3_RTE_ROOT/client_server1/aws/client"
        terraform apply -compact-warnings -var-file=$RTE_ROOT_DIR/client_server1/terraform.tfvars.json -var-file=$ARTIFACTS_ROOT_DIR/eut/mcn/aws/site.tfvars -auto-approve
        terraform output > $ARTIFACTS_ROOT_DIR/rte/client_server1/aws/client/client.tfvars
        #terraform output -json aws_workload_vpc_ids > $RTE_CLIENT_SERVER1_AWS_VPC_IDS_ARTIFACTS_FILE
        #terraform output -json | jq 'with_entries(select(.key | in({"destination_ip":1, "ssh_host":1, "ssh_user":1})))' > $RTE_CLIENT_SERVER1_AWS_CONNECTION_ARTIFACTS_FILE
        #echo "aws_destination_ip=$(terraform output destination_ip)" >> $RTE_client_server1_aws_DESTINATION_IPS_ARTIFACTS_FILE
        
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte-client-server1-aws-client - artifacts
rte-client-server1-aws-client-artifacts:
  <<: *base
  rules:
    - !reference [ .regression_test_rules, rules ]
    - !reference [ .destroy_rules, rules ]
    - !reference [ .regression_test_client_server1_east_west_traffic_a, rules ]
    - !reference [ .regression_test_client_server1_east_west_traffic_b, rules ]
  stage: rte-artifacts
  script:
      - |
        #!/usr/bin/env bash
        mkdir -p $ARTIFACTS_ROOT_DIR/rte/client_server1/aws/client
        cd $RTE_ROOT_DIR/client_server1/aws/client
        terraform init --backend-config="key=$S3_RTE_ROOT/client_server1/aws/client"
        terraform output > $ARTIFACTS_ROOT_DIR/rte/client_server1/aws/client/client.tfvars
        
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 5m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte-client-server1-aws-server - apply
rte-client-server1-aws-server-apply:
  <<: *base
  stage: rte-apply
  rules:
    - !reference [ .deploy_rules, rules ]
    - !reference [ .deploy_rte_rules, rules ]
  script:
      - |
        #!/usr/bin/env bash
        mkdir -p $ARTIFACTS_ROOT_DIR/rte/client_server1/aws/server
        cd $RTE_ROOT_DIR/client_server1/aws/server
        terraform init --backend-config="key=$S3_RTE_ROOT/client_server1/aws/server"
        terraform apply -var-file=$RTE_ROOT_DIR/client_server1/terraform.tfvars.json -var-file=$ARTIFACTS_ROOT_DIR/eut/mcn/aws/site.tfvars -auto-approve
        terraform output > $ARTIFACTS_ROOT_DIR/rte/client_server1/aws/server/server.tfvars
        
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte-client-server1-aws-server - artifacts
rte-client-server1-aws-server-artifacts:
  <<: *base
  rules:
    - !reference [ .regression_test_rules, rules ]
    - !reference [ .destroy_rules, rules ]
    - !reference [ .regression_test_client_server1_east_west_traffic_a, rules ]
    - !reference [ .regression_test_client_server1_east_west_traffic_b, rules ]
  stage: rte-artifacts
  script:
      - |
        #!/usr/bin/env bash
        mkdir -p $ARTIFACTS_ROOT_DIR/rte/client_server1/aws/server
        cd $RTE_ROOT_DIR/client_server1/aws/server
        terraform init --backend-config="key=$S3_RTE_ROOT/client_server1/aws/server"
        terraform output > $ARTIFACTS_ROOT_DIR/rte/client_server1/aws/server/server.tfvars
        
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 5m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# feature - mcn - firewall - apply
feature-mcn-firewall-apply:
  <<: *base
  stage: feature-apply
  rules:
    - !reference [ .deploy_rules, rules ]
    - !reference [ .deploy_feature_rules, rules ]
  script:
      - |
        #!/usr/bin/env bash
        cd $FEATURES_ROOT_DIR/firewall
        terraform init --backend-config="key=$S3_EUT_ROOT/mcn/features/firewall/1.0"
        #terraform apply -var-file=$EUT_ROOT_TF_VAR_FILE -auto-approve
        #terraform output > $FEATURES_ROOT_DIR/firewall/feature.tfvars
        
  timeout: 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# feature - mcn - loadbalancer - apply
feature-mcn-loadbalancer-apply:
  <<: *base
  stage: feature-apply
  rules:
    - !reference [ .deploy_rules, rules ]
    - !reference [ .deploy_feature_rules, rules ]
  script:
      - |
        #!/usr/bin/env bash
        cd $FEATURES_ROOT_DIR/loadbalancer
        terraform init --backend-config="key=$S3_EUT_ROOT/mcn/features/loadbalancer/1.0"
        #terraform apply -var-file=$EUT_ROOT_TF_VAR_FILE -auto-approve
        #terraform output > $FEATURES_ROOT_DIR/loadbalancer/feature.tfvars
        
  timeout: 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# test - test-client-server-aws-east-west-traffic-a - apply
test-client-server-aws-east-west-traffic-a-apply:
  <<: *base
  rules:
    - !reference [ .regression_test_rules, rules ]
    - !reference [ .regression_test_client_server_east_west_traffic_a, rules ]
  stage: regression-test
  script:
      - |
        #!/usr/bin/env bash
        mkdir -p $ARTIFACTS_ROOT_DIR/tests/client_server/aws/east-west-traffic-a
        cd $CI_PROJECT_DIR/regression/tests/fortio
        terraform init --backend-config="key=$S3_TESTS_ROOT/fortio"
        terraform apply -compact-warnings -var-file=$ARTIFACTS_ROOT_DIR/rte/client_server/aws/client/client.tfvars -var-file=$ARTIFACTS_ROOT_DIR/rte/client_server/aws/server/server.tfvars -auto-approve
        cp /tmp/fortio.data $ARTIFACTS_ROOT_DIR/tests/client_server/aws/east-west-traffic-a/fortio.data
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 15m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# test - test-client-server-aws-east-west-traffic-b - apply
test-client-server-aws-east-west-traffic-b-apply:
  <<: *base
  rules:
    - !reference [ .regression_test_rules, rules ]
    - !reference [ .regression_test_client_server_east_west_traffic_b, rules ]
  stage: regression-test
  script:
      - |
        #!/usr/bin/env bash
        mkdir -p $ARTIFACTS_ROOT_DIR/tests/client_server/aws/east-west-traffic-b
        cd $CI_PROJECT_DIR/regression/tests/iperf
        terraform init --backend-config="key=$S3_TESTS_ROOT/iperf"
        terraform apply -compact-warnings -var-file=$ARTIFACTS_ROOT_DIR/rte/client_server/aws/client/client.tfvars -var-file=$ARTIFACTS_ROOT_DIR/rte/client_server/aws/server/server.tfvars -auto-approve
        ls -la /tmp
        cp /tmp/iperf.data $ARTIFACTS_ROOT_DIR/tests/client_server/aws/east-west-traffic-b/iperf.data
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 15m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# test - test-client-server1-aws-east-west-traffic-a - apply
test-client-server1-aws-east-west-traffic-a-apply:
  <<: *base
  rules:
    - !reference [ .regression_test_rules, rules ]
    - !reference [ .regression_test_client_server1_east_west_traffic_a, rules ]
  stage: regression-test
  script:
      - |
        #!/usr/bin/env bash
        mkdir -p $ARTIFACTS_ROOT_DIR/tests/client_server1/aws/east-west-traffic-a
        cd $CI_PROJECT_DIR/regression/tests/fortio
        terraform init --backend-config="key=$S3_TESTS_ROOT/fortio"
        terraform apply -compact-warnings -var-file=$ARTIFACTS_ROOT_DIR/rte/client_server1/aws/client/client.tfvars -var-file=$ARTIFACTS_ROOT_DIR/rte/client_server1/aws/server/server.tfvars -auto-approve
        cp /tmp/fortio.data $ARTIFACTS_ROOT_DIR/tests/client_server1/aws/east-west-traffic-a/fortio.data
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 15m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# test - test-client-server1-aws-east-west-traffic-b - apply
test-client-server1-aws-east-west-traffic-b-apply:
  <<: *base
  rules:
    - !reference [ .regression_test_rules, rules ]
    - !reference [ .regression_test_client_server1_east_west_traffic_b, rules ]
  stage: regression-test
  script:
      - |
        #!/usr/bin/env bash
        mkdir -p $ARTIFACTS_ROOT_DIR/tests/client_server1/aws/east-west-traffic-b
        cd $CI_PROJECT_DIR/regression/tests/iperf
        terraform init --backend-config="key=$S3_TESTS_ROOT/iperf"
        terraform apply -compact-warnings -var-file=$ARTIFACTS_ROOT_DIR/rte/client_server1/aws/client/client.tfvars -var-file=$ARTIFACTS_ROOT_DIR/rte/client_server1/aws/server/server.tfvars -auto-approve
        cp /tmp/iperf.data $ARTIFACTS_ROOT_DIR/tests/client_server1/aws/east-west-traffic-b/iperf.data
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 15m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# verification - verification-client-server-aws-east-west-traffic-a-east-west-traffic-verify-a - apply
verification-client-server-aws-east-west-traffic-a-east-west-traffic-verify-a-apply:
  <<: *base
  rules:
    - !reference [ .regression_verification_rules, rules ]
    - !reference [ .regression_verification_client_server_east_west_traffic_a_east_west_traffic_verify_a, rules ]
  stage: regression-test-verify
  script:
      - |
        #!/usr/bin/env bash
        cd $CI_PROJECT_DIR/regression/verification/bandwidth
        terraform init --backend-config="key=$S3_VERIFICATIONS_ROOT/bandwidth"
        terraform apply -compact-warnings -var-file=$ARTIFACTS_ROOT_DIR/bandwidth/artifacts.tfvars -auto-approve
  timeout: 15m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# verification - verification-client-server-aws-east-west-traffic-b-east-west-traffic-verify-b - apply
verification-client-server-aws-east-west-traffic-b-east-west-traffic-verify-b-apply:
  <<: *base
  rules:
    - !reference [ .regression_verification_rules, rules ]
    - !reference [ .regression_verification_client_server_east_west_traffic_b_east_west_traffic_verify_b, rules ]
  stage: regression-test-verify
  script:
      - |
        #!/usr/bin/env bash
        cd $CI_PROJECT_DIR/regression/verification/bandwidth
        terraform init --backend-config="key=$S3_VERIFICATIONS_ROOT/bandwidth"
        terraform apply -compact-warnings -var-file=$ARTIFACTS_ROOT_DIR/bandwidth/artifacts.tfvars -auto-approve
  timeout: 15m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# verification - verification-client-server1-aws-east-west-traffic-a-east-west-traffic-verify-a - apply
verification-client-server1-aws-east-west-traffic-a-east-west-traffic-verify-a-apply:
  <<: *base
  rules:
    - !reference [ .regression_verification_rules, rules ]
    - !reference [ .regression_verification_client_server1_east_west_traffic_a_east_west_traffic_verify_a, rules ]
  stage: regression-test-verify
  script:
      - |
        #!/usr/bin/env bash
        cd $CI_PROJECT_DIR/regression/verification/bandwidth
        terraform init --backend-config="key=$S3_VERIFICATIONS_ROOT/bandwidth"
        terraform apply -compact-warnings -var-file=$ARTIFACTS_ROOT_DIR/bandwidth/artifacts.tfvars -auto-approve
  timeout: 15m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# verification - verification-client-server1-aws-east-west-traffic-b-east-west-traffic-verify-b - apply
verification-client-server1-aws-east-west-traffic-b-east-west-traffic-verify-b-apply:
  <<: *base
  rules:
    - !reference [ .regression_verification_rules, rules ]
    - !reference [ .regression_verification_client_server1_east_west_traffic_b_east_west_traffic_verify_b, rules ]
  stage: regression-test-verify
  script:
      - |
        #!/usr/bin/env bash
        cd $CI_PROJECT_DIR/regression/verification/bandwidth
        terraform init --backend-config="key=$S3_VERIFICATIONS_ROOT/bandwidth"
        terraform apply -compact-warnings -var-file=$ARTIFACTS_ROOT_DIR/bandwidth/artifacts.tfvars -auto-approve
  timeout: 15m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte-client-server-aws-client - destroy
rte-client-server-aws-client-destroy:
  <<: *base
  stage: rte-destroy
  rules:
    - !reference [ .destroy_rules, rules ]
    - !reference [ .destroy_rte_rules, rules ]
  script:
    - |
      #!/usr/bin/env bash
      cd $RTE_ROOT_DIR/client_server/aws/client
      terraform init --backend-config="key=$S3_RTE_ROOT/client_server/aws/client"
      terraform destroy -compact-warnings -var-file=$RTE_ROOT_DIR/client_server/terraform.tfvars.json -var-file=$ARTIFACTS_ROOT_DIR/eut/mcn/aws/site.tfvars -auto-approve
      
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte-client-server-aws-server - destroy
rte-client-server-aws-server-destroy:
  <<: *base
  stage: rte-destroy
  rules:
    - !reference [ .destroy_rules, rules ]
    - !reference [ .destroy_rte_rules, rules ]
  script:
    - |
      #!/usr/bin/env bash
      cd $RTE_ROOT_DIR/client_server/aws/server
      terraform init --backend-config="key=$S3_RTE_ROOT/client_server/aws/server"
      terraform destroy -compact-warnings -var-file=$RTE_ROOT_DIR/client_server/terraform.tfvars.json -var-file=$ARTIFACTS_ROOT_DIR/eut/mcn/aws/site.tfvars -auto-approve
      
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte-client-server-azure-server - destroy
rte-client-server-azure-server-destroy:
  <<: *base
  stage: rte-destroy
  rules:
    - !reference [ .destroy_rules, rules ]
    - !reference [ .destroy_rte_rules, rules ]
  script:
    - |
      #!/usr/bin/env bash
      cd $RTE_ROOT_DIR/client_server/azure/server
      terraform init --backend-config="key=$S3_RTE_ROOT/client_server/azure/server"
      # terraform destroy -compact-warnings -var-file=$RTE_ROOT_DIR/client_server/terraform.tfvars.json -var-file=$ARTIFACTS_ROOT_DIR/eut/mcn/azure/site.tfvars -auto-approve
      
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte-client-server1-aws-client - destroy
rte-client-server1-aws-client-destroy:
  <<: *base
  stage: rte-destroy
  rules:
    - !reference [ .destroy_rules, rules ]
    - !reference [ .destroy_rte_rules, rules ]
  script:
    - |
      #!/usr/bin/env bash
      cd $RTE_ROOT_DIR/client_server1/aws/client
      terraform init --backend-config="key=$S3_RTE_ROOT/client_server1/aws/client"
      terraform destroy -compact-warnings -var-file=$RTE_ROOT_DIR/client_server1/terraform.tfvars.json -var-file=$ARTIFACTS_ROOT_DIR/eut/mcn/aws/site.tfvars -auto-approve
      
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure

# rte-client-server1-aws-server - destroy
rte-client-server1-aws-server-destroy:
  <<: *base
  stage: rte-destroy
  rules:
    - !reference [ .destroy_rules, rules ]
    - !reference [ .destroy_rte_rules, rules ]
  script:
    - |
      #!/usr/bin/env bash
      cd $RTE_ROOT_DIR/client_server1/aws/server
      terraform init --backend-config="key=$S3_RTE_ROOT/client_server1/aws/server"
      terraform destroy -compact-warnings -var-file=$RTE_ROOT_DIR/client_server1/terraform.tfvars.json -var-file=$ARTIFACTS_ROOT_DIR/eut/mcn/aws/site.tfvars -auto-approve
      
  artifacts:
    paths:
      - $ARTIFACTS_ROOT_DIR/
    expire_in: 3h
  timeout: 30m
  retry:
    max: 1
    when:
      - script_failure
      - stuck_or_timeout_failure
      - runner_system_failure
